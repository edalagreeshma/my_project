{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Edala Greeshma\\\\OneDrive\\\\Desktop\\\\greeshma\\\\my_project\\\\src\\\\components\\\\Linegraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineChart() {\n  _s();\n  const [data, setData] = useState([]);\n  const [showChart, setShowChart] = useState(false);\n  const [chartInstance, setChartInstance] = useState(null);\n  const [label, setlabel] = useState(null);\n  const [Dates, setDates] = useState(null);\n  useEffect(() => {\n    if (chartInstance) {\n      chartInstance.destroy();\n    }\n  }, [showChart]);\n  const fetchData = async value => {\n    try {\n      const response = await axios.get('https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=44.34&lon=10.99&appid=b1b15e88fa797225412429c1c50c122a1');\n      let data = response.data.list;\n      const temperatures = data.map(item => item.main.temp);\n      const humidity = data.map(item => item.main.humidity);\n      const Dates = data.map(item => item.dt_txt);\n      if (value === \"temperature\") {\n        setData(temperatures);\n        setlabel(\"temperature\");\n        setDates(Dates);\n      } else {\n        setData(humidity);\n        setlabel(\"humidity\");\n        setDates(Dates);\n      }\n      setShowChart(true);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const createChartData = () => {\n    if (data.length === 0) {\n      return {};\n    }\n    const chartData = {\n      labels: Dates.map(item => {\n        return item;\n      }),\n      // Use timestamp as labels\n      datasets: [{\n        label: label,\n        data: data,\n        fill: false,\n        borderColor: 'rgba(75, 192, 192, 0.7)',\n        borderWidth: 2\n      }]\n    };\n    return chartData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App App-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Temperature Line Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttoncntainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchData(\"temperature\"),\n        children: \"Fetch Temperature Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fetchData(\"Humidity\"),\n        children: \"Fetch Humidity Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), showChart && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: createChartData(),\n        options: {\n          maintainAspectRatio: false\n        },\n        ref: ref => setChartInstance(ref)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart, \"dOLie2KebT3/dQytQ4+LLiszt0Y=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Line","jsxDEV","_jsxDEV","LineChart","_s","data","setData","showChart","setShowChart","chartInstance","setChartInstance","label","setlabel","Dates","setDates","destroy","fetchData","value","response","get","list","temperatures","map","item","main","temp","humidity","dt_txt","error","console","createChartData","length","chartData","labels","datasets","fill","borderColor","borderWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","options","maintainAspectRatio","ref","_c","$RefreshReg$"],"sources":["C:/Users/Edala Greeshma/OneDrive/Desktop/greeshma/my_project/src/components/Linegraph.js"],"sourcesContent":["\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction LineChart() {\r\n  const [data, setData] = useState([]);\r\n  const [showChart, setShowChart] = useState(false);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n  const [label, setlabel] = useState(null)\r\n  const [Dates, setDates] = useState(null)\r\n\r\n  useEffect(() => {\r\n    if (chartInstance) {\r\n      chartInstance.destroy();\r\n    }\r\n  }, [showChart]);\r\n\r\n  const fetchData = async (value) => {\r\n    try {\r\n      const response = await axios.get(\r\n        'https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=44.34&lon=10.99&appid=b1b15e88fa797225412429c1c50c122a1'\r\n      );\r\n      let data = response.data.list \r\n      const temperatures  = data.map((item) => item.main.temp);\r\n      const humidity = data.map((item)=>item.main.humidity)\r\n      const Dates=data.map((item)=>item.dt_txt)\r\n      if(value===\"temperature\"){\r\n        setData(temperatures)\r\n        setlabel(\"temperature\")\r\n        setDates(Dates)\r\n      }\r\n      else{\r\n        setData(humidity)\r\n        setlabel(\"humidity\")\r\n        setDates(Dates)\r\n      }\r\n      setShowChart(true);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const createChartData = () => {\r\n    if (data.length === 0) {\r\n      return {}; \r\n    }\r\n\r\n    \r\n\r\n    const chartData = {\r\n      labels: Dates.map((item) => {\r\n       \r\n       return item\r\n      }),\r\n    // Use timestamp as labels\r\n      datasets: [\r\n        {\r\n          label: label, \r\n          data: data,\r\n          fill: false,\r\n          borderColor: 'rgba(75, 192, 192, 0.7)',\r\n          borderWidth: 2,\r\n        },\r\n      ],\r\n    };\r\n\r\n    return chartData;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App App-content\">\r\n      <h1>Temperature Line Chart</h1>\r\n      <div className=\"buttoncntainer\">\r\n      <button onClick={()=>fetchData(\"temperature\")}>Fetch Temperature Data</button>\r\n      <button onClick={()=>fetchData(\"Humidity\")}>Fetch Humidity Data</button>\r\n      </div>\r\n\r\n      {showChart && (\r\n        <div className=\"chart-container\">\r\n          <Line\r\n            data={createChartData()}\r\n            options={{ maintainAspectRatio: false }}\r\n            ref={(ref) => setChartInstance(ref)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineChart;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}