{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Edala Greeshma\\\\OneDrive\\\\Desktop\\\\greeshma\\\\my_project\\\\src\\\\Charts.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart } from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart() {\n  _s();\n  const [data, setData] = useState([]);\n  const [showChart, setShowChart] = useState(true);\n  const [chartInstance, setChartInstance] = useState(null);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=44.34&lon=10.99&appid=b1b15e88fa797225412429c1c50c122a1');\n      setData(response.data.list);\n      setShowChart(true);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const createChartData = () => {\n    if (data.length === 0) {\n      return {}; // Return an empty object if data is not available yet\n    }\n\n    // Extract relevant data from the API response\n    const labels = data.map(item => item.dt_txt);\n    const temperatures = data.map(item => item.main.temp);\n    const humidity = data.map(item => item.main.humidity);\n    const chartData = {\n      labels: labels,\n      datasets: [{\n        label: 'Temperature (째K)',\n        data: temperatures,\n        backgroundColor: 'blue' // You can change the bar color here\n      }]\n    };\n\n    return chartData;\n  };\n  useEffect(() => {\n    if (chartInstance) {\n      chartInstance.destroy(); // Destroy the existing chart instance\n    }\n\n    // Create a new chart instance\n    const newChartInstance = new Chart(document.getElementById('myChart'), {\n      type: 'bar',\n      data: createChartData(),\n      options: {\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          }\n        },\n        scales: {\n          x: {\n            type: 'time',\n            // Use 'time' scale type for dates\n            title: {\n              display: true,\n              text: 'Hours'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Temperature (째K)'\n            }\n          }\n        }\n      }\n    });\n    setChartInstance(newChartInstance);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Temperature Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), showChart && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart\",\n        width: \"400\",\n        height: \"200\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(BarChart, \"YiknwAW9sW81arBV41gpsdgXVH0=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","Chart","jsxDEV","_jsxDEV","BarChart","_s","data","setData","showChart","setShowChart","chartInstance","setChartInstance","fetchData","response","get","list","error","console","createChartData","length","labels","map","item","dt_txt","temperatures","main","temp","humidity","chartData","datasets","label","backgroundColor","destroy","newChartInstance","document","getElementById","type","options","plugins","legend","display","position","scales","x","title","text","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Edala Greeshma/OneDrive/Desktop/greeshma/my_project/src/Charts.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart } from 'chart.js/auto';\r\nfunction BarChart() {\r\n  const [data, setData] = useState([]);\r\n  const [showChart, setShowChart] = useState(true);\r\n  const [chartInstance, setChartInstance] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        'https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=44.34&lon=10.99&appid=b1b15e88fa797225412429c1c50c122a1'\r\n      );\r\n      setData(response.data.list);\r\n      setShowChart(true);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  };\r\n\r\n  const createChartData = () => {\r\n    if (data.length === 0) {\r\n      return {}; // Return an empty object if data is not available yet\r\n    }\r\n\r\n    // Extract relevant data from the API response\r\n    const labels = data.map((item) => item.dt_txt);\r\n    const temperatures = data.map((item) => item.main.temp);\r\n    const humidity = data.map((item)=> item.main.humidity) \r\n\r\n    const chartData = {\r\n      labels: labels,\r\n      datasets: [\r\n        {\r\n          label: 'Temperature (째K)',\r\n          data: temperatures,\r\n          backgroundColor: 'blue', // You can change the bar color here\r\n        },\r\n      ],\r\n    };\r\n\r\n    return chartData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chartInstance) {\r\n      chartInstance.destroy(); // Destroy the existing chart instance\r\n    }\r\n\r\n    // Create a new chart instance\r\n    const newChartInstance = new Chart(document.getElementById('myChart'), {\r\n      type: 'bar',\r\n      data: createChartData(),\r\n      options: {\r\n        plugins: {\r\n          legend: {\r\n            display: true,\r\n            position: 'top',\r\n          },\r\n        },\r\n        scales: {\r\n          x: {\r\n            type: 'time', // Use 'time' scale type for dates\r\n            title: {\r\n              display: true,\r\n              text: 'Hours',\r\n            },\r\n          },\r\n          y: {\r\n            title: {\r\n              display: true,\r\n              text: 'Temperature (째K)',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    setChartInstance(newChartInstance);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Temperature Bar Chart</h1>\r\n      {showChart && (\r\n        <div className=\"chart-container\">\r\n          <canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarChart;\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}